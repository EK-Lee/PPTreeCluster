// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrix2vector
NumericVector matrix2vector(NumericMatrix m, const bool byrow);
RcppExport SEXP _PPtreeCluster_matrix2vector(SEXP mSEXP, SEXP byrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool >::type byrow(byrowSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix2vector(m, byrow));
    return rcpp_result_gen;
END_RCPP
}
// Quantile
Rcpp::NumericVector Quantile(Rcpp::NumericVector x, Rcpp::NumericVector probs);
RcppExport SEXP _PPtreeCluster_Quantile(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(Quantile(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// HolesIndex1D
double HolesIndex1D(NumericMatrix origdata, NumericVector proj);
RcppExport SEXP _PPtreeCluster_HolesIndex1D(SEXP origdataSEXP, SEXP projSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proj(projSEXP);
    rcpp_result_gen = Rcpp::wrap(HolesIndex1D(origdata, proj));
    return rcpp_result_gen;
END_RCPP
}
// SkewIndex1D
double SkewIndex1D(NumericMatrix origdata, NumericVector proj);
RcppExport SEXP _PPtreeCluster_SkewIndex1D(SEXP origdataSEXP, SEXP projSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proj(projSEXP);
    rcpp_result_gen = Rcpp::wrap(SkewIndex1D(origdata, proj));
    return rcpp_result_gen;
END_RCPP
}
// CombIndex1D
double CombIndex1D(NumericMatrix origdata, NumericVector proj, double gamma);
RcppExport SEXP _PPtreeCluster_CombIndex1D(SEXP origdataSEXP, SEXP projSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proj(projSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(CombIndex1D(origdata, proj, gamma));
    return rcpp_result_gen;
END_RCPP
}
// LppIndex1D
double LppIndex1D(NumericMatrix origdata, NumericVector proj, std::string method, double eps, NumericVector probV, bool weight, int nk, double t);
RcppExport SEXP _PPtreeCluster_LppIndex1D(SEXP origdataSEXP, SEXP projSEXP, SEXP methodSEXP, SEXP epsSEXP, SEXP probVSEXP, SEXP weightSEXP, SEXP nkSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proj(projSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probV(probVSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(LppIndex1D(origdata, proj, method, eps, probV, weight, nk, t));
    return rcpp_result_gen;
END_RCPP
}
// NHIndex1D
double NHIndex1D(NumericMatrix origdata, NumericVector proj, int m);
RcppExport SEXP _PPtreeCluster_NHIndex1D(SEXP origdataSEXP, SEXP projSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proj(projSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(NHIndex1D(origdata, proj, m));
    return rcpp_result_gen;
END_RCPP
}
// PIndex1D
double PIndex1D(NumericMatrix origdata, NumericVector proj, NumericVector probT, NumericVector R);
RcppExport SEXP _PPtreeCluster_PIndex1D(SEXP origdataSEXP, SEXP projSEXP, SEXP probTSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proj(projSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probT(probTSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(PIndex1D(origdata, proj, probT, R));
    return rcpp_result_gen;
END_RCPP
}
// PPclustopt1D
List PPclustopt1D(NumericMatrix origdata, std::string PPmethod, double gamma, std::string method, double eps, NumericVector probV, bool weight, int nk, double t, int m, NumericVector probTV, NumericVector RV, double energy, double cooling, double TOL, int maxiter);
RcppExport SEXP _PPtreeCluster_PPclustopt1D(SEXP origdataSEXP, SEXP PPmethodSEXP, SEXP gammaSEXP, SEXP methodSEXP, SEXP epsSEXP, SEXP probVSEXP, SEXP weightSEXP, SEXP nkSEXP, SEXP tSEXP, SEXP mSEXP, SEXP probTVSEXP, SEXP RVSEXP, SEXP energySEXP, SEXP coolingSEXP, SEXP TOLSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probV(probVSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probTV(probTVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RV(RVSEXP);
    Rcpp::traits::input_parameter< double >::type energy(energySEXP);
    Rcpp::traits::input_parameter< double >::type cooling(coolingSEXP);
    Rcpp::traits::input_parameter< double >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(PPclustopt1D(origdata, PPmethod, gamma, method, eps, probV, weight, nk, t, m, probTV, RV, energy, cooling, TOL, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PPtreeCluster_matrix2vector", (DL_FUNC) &_PPtreeCluster_matrix2vector, 2},
    {"_PPtreeCluster_Quantile", (DL_FUNC) &_PPtreeCluster_Quantile, 2},
    {"_PPtreeCluster_HolesIndex1D", (DL_FUNC) &_PPtreeCluster_HolesIndex1D, 2},
    {"_PPtreeCluster_SkewIndex1D", (DL_FUNC) &_PPtreeCluster_SkewIndex1D, 2},
    {"_PPtreeCluster_CombIndex1D", (DL_FUNC) &_PPtreeCluster_CombIndex1D, 3},
    {"_PPtreeCluster_LppIndex1D", (DL_FUNC) &_PPtreeCluster_LppIndex1D, 8},
    {"_PPtreeCluster_NHIndex1D", (DL_FUNC) &_PPtreeCluster_NHIndex1D, 3},
    {"_PPtreeCluster_PIndex1D", (DL_FUNC) &_PPtreeCluster_PIndex1D, 4},
    {"_PPtreeCluster_PPclustopt1D", (DL_FUNC) &_PPtreeCluster_PPclustopt1D, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_PPtreeCluster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
